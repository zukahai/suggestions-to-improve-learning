  {
    "code2": "function decodeHtmlEntities(text) {\n    const entities = [\n        ['amp', '&'],\n        ['apos', \"'\"],\n        ['lt', '<'],\n        ['gt', '>'],\n        ['quot', '\"'],\n    ];\n    for (let i = 0; i < entities.length; i++) {\n        text = text.replace(new RegExp(`&${entities[i][0]};`, 'g'), entities[i][1]);\n    }\n    return text;\n}\nlet table = document.getElementsByTagName('table');\nlet tableScore = table[1];\nlet elementScores = tableScore.getElementsByClassName('pointer');\nlet scoreAll = [];\nfor (let tr of elementScores) {\n    let score = {};\n    let tdList = tr.getElementsByTagName('td');\n\n    score.id = tdList[0] ? tdList[0].innerHTML : '';\n    if (score.id !== '') {\n        score.id = parseInt(score.id);\n    }\n    // Remove unnecessary span tag in the \"name\" field\n    let nameField = tdList[1] ? tdList[1].innerHTML : '';\n    score.name = nameField.replace(/<[^>]+>/g, '').trim();\n    // xoá tất cả các ký tự đặc biệt\n    score.name = decodeHtmlEntities(nameField.replace(/<[^>]+>/g, '').replace('!!', '')).trim();\n\n    if (score.name === '') {\n        continue;\n    }\n    score.countTC = tdList[2] ? tdList[2].innerHTML : '';\n    if (score.countTC !== '') {\n        score.countTC = parseInt(score.countTC);\n    }\n    score.countLH = tdList[3] ? tdList[3].innerHTML : '';\n    if (score.countLH !== '') {\n        score.countLH = parseInt(score.countLH);\n    }\n    score.scoreCC = tdList[4] ? tdList[4].innerHTML.trim() : '';\n    if (score.scoreCC !== '') {\n        score.scoreCC = parseFloat(score.scoreCC);\n    }\n    score.scoreBT = tdList[5] ? tdList[5].innerHTML : '';\n    if (score.scoreBT !== '') {\n        score.scoreBT = parseFloat(score.scoreBT);\n    }\n    score.scoreGK = tdList[6] ? tdList[6].innerHTML : '';\n    if (score.scoreGK !== '') {\n        score.scoreGK = parseFloat(score.scoreGK);\n    }\n    score.scoreCK = tdList[7] ? tdList[7].innerHTML : '';\n    if (score.scoreCK !== '') {\n        score.scoreCK = parseFloat(score.scoreCK);\n    }\n    // Extract values from <b> tags in scoreT10 and scoreCh fields\n    let scoreT10Field = tdList[8] ? tdList[8].innerHTML : '';\n    let scoreT10Match = scoreT10Field.match(/<b>(.*?)<\\/b>/);\n    score.scoreT10 = scoreT10Match ? scoreT10Match[1] : '';\n    if (score.scoreT10 !== '') {\n        score.scoreT10 = parseFloat(score.scoreT10);\n    }\n    let scoreChField = tdList[9] ? tdList[9].innerHTML : '';\n    let scoreChMatch = scoreChField.match(/<b[^>]*>(.*?)<\\/b>/);\n    score.scoreCh = scoreChMatch ? scoreChMatch[1] : '';\n    scoreAll.push(score);\n}\nlet duplicate = {};\nscoreAll.forEach((score) => {\n    if (!duplicate[score.name]) {\n        duplicate[score.name] = score;\n    } else {\n        if (score.scoreT10 > duplicate[score.name].scoreT10) {\n            duplicate[score.name] = score;\n        }\n    }\n});\nscoreAll = Object.values(duplicate);\nlet dataDownload = {\n    scoreAll,\n};\nlet json = JSON.stringify(dataDownload);\nconst blob = new Blob([json], { type: 'application/json' });\nconst url = URL.createObjectURL(blob);\nconst link = document.createElement('a');\nlink.href = url;\nlink.download = 'diem.json';\nlink.click();\nURL.revokeObjectURL(url);\nlink.remove();\n",
    "code": "function decodeHtmlEntities(text) {\n    const entities = [\n        ['amp', '&'],\n        ['apos', \"'\"],\n        ['lt', '<'],\n        ['gt', '>'],\n        ['quot', '\"'],\n    ];\n\n    for (let i = 0; i < entities.length; i++) {\n        text = text.replace(new RegExp(`&${entities[i][0]};`, 'g'), entities[i][1]);\n    }\n\n    return text;\n}\nlet table = document.getElementsByTagName('table');\nlet tableScore = table[1];\nlet elementScores = tableScore.getElementsByClassName('pointer');\nlet scoreAll = [];\n\nfor (let tr of elementScores) {\n    let score = {};\n    let tdList = tr.getElementsByTagName('td');\n\n    score.id = tdList[0] ? tdList[0].innerHTML : '';\n    if (score.id !== '') {\n        score.id = parseInt(score.id);\n    }\n    // Remove unnecessary span tag in the \"name\" field\n    let nameField = tdList[1] ? tdList[1].innerHTML : '';\n    score.name = nameField.replace(/<[^>]+>/g, '').trim();\n    // xoá tất cả các ký tự đặc biệt\n    score.name = decodeHtmlEntities(nameField.replace(/<[^>]+>/g, '').replace('!!', '')).trim();\n\n    if (score.name === '') {\n        continue;\n    }\n    score.countTC = tdList[2] ? tdList[2].innerHTML : '';\n    if (score.countTC !== '') {\n        score.countTC = parseInt(score.countTC);\n    }\n    score.countLH = tdList[3] ? tdList[3].innerHTML : '';\n    if (score.countLH !== '') {\n        score.countLH = parseInt(score.countLH);\n    }\n    score.scoreCC = tdList[4] ? tdList[4].innerHTML.trim() : '';\n    if (score.scoreCC !== '') {\n        score.scoreCC = parseFloat(score.scoreCC);\n    }\n    score.scoreBT = tdList[5] ? tdList[5].innerHTML : '';\n    if (score.scoreBT !== '') {\n        score.scoreBT = parseFloat(score.scoreBT);\n    }\n    score.scoreGK = tdList[6] ? tdList[6].innerHTML : '';\n    if (score.scoreGK !== '') {\n        score.scoreGK = parseFloat(score.scoreGK);\n    }\n    score.scoreCK = tdList[7] ? tdList[7].innerHTML : '';\n    if (score.scoreCK !== '') {\n        score.scoreCK = parseFloat(score.scoreCK);\n    }\n    // Extract values from <b> tags in scoreT10 and scoreCh fields\n    let scoreT10Field = tdList[8] ? tdList[8].innerHTML : '';\n    let scoreT10Match = scoreT10Field.match(/<b>(.*?)<\\/b>/);\n    score.scoreT10 = scoreT10Match ? scoreT10Match[1] : '';\n    if (score.scoreT10 !== '') {\n        score.scoreT10 = parseFloat(score.scoreT10);\n    }\n    let scoreChField = tdList[9] ? tdList[9].innerHTML : '';\n    let scoreChMatch = scoreChField.match(/<b[^>]*>(.*?)<\\/b>/);\n    score.scoreCh = scoreChMatch ? scoreChMatch[1] : '';\n    scoreAll.push(score);\n}\nlet duplicate = {};\nscoreAll.forEach((score) => {\n    if (!duplicate[score.name]) {\n        duplicate[score.name] = score;\n    } else {\n        if (score.scoreT10 > duplicate[score.name].scoreT10) {\n            duplicate[score.name] = score;\n        }\n    }\n});\n\nscoreAll = Object.values(duplicate);\n\nlet scoreClassify = {\n    A: {\n        tinChi: 0,\n        data: [],\n    },\n    B: {\n        tinChi: 0,\n        data: [],\n    },\n    C: {\n        tinChi: 0,\n        data: [],\n    },\n    D: {\n        tinChi: 0,\n        data: [],\n    },\n    F: {\n        tinChi: 0,\n        data: [],\n    },\n    AllTinChi: 0,\n    GPA: 0,\n};\n\nscoreAll.forEach((score) => {\n    if (score.scoreCh === 'A') {\n        scoreClassify.A.data.push(score);\n        scoreClassify.A.tinChi += score.countTC;\n    } else if (score.scoreCh === 'B') {\n        scoreClassify.B.data.push(score);\n        scoreClassify.B.tinChi += score.countTC;\n    } else if (score.scoreCh === 'C') {\n        scoreClassify.C.data.push(score);\n        scoreClassify.C.tinChi += score.countTC;\n    } else if (score.scoreCh === 'D') {\n        scoreClassify.D.data.push(score);\n        scoreClassify.D.tinChi += score.countTC;\n    } else if (score.scoreCh === 'F') {\n        scoreClassify.F.data.push(score);\n        scoreClassify.F.tinChi += score.countTC;\n    }\n});\nscoreClassify.AllTinChi +=\n    scoreClassify.A.tinChi +\n    scoreClassify.B.tinChi +\n    scoreClassify.C.tinChi +\n    scoreClassify.D.tinChi +\n    scoreClassify.F.tinChi;\nscoreClassify.Gpa =\n    (4 * scoreClassify.A.tinChi +\n        3 * scoreClassify.B.tinChi +\n        2 * scoreClassify.C.tinChi +\n        1 * scoreClassify.D.tinChi +\n        scoreClassify.F.tinChi) /\n    scoreClassify.AllTinChi;\nlet count = {\n    A: scoreClassify.A.tinChi,\n    B: scoreClassify.B.tinChi,\n    C: scoreClassify.C.tinChi,\n    D: scoreClassify.D.tinChi,\n    F: scoreClassify.F.tinChi,\n};\nlet dataDownload = {\n    scoreClassify,\n    scoreAll,\n    count,\n};\nlet json = JSON.stringify(dataDownload);\n\nconst blob = new Blob([json], { type: 'application/json' });\n\nconst url = URL.createObjectURL(blob);\n\nconst link = document.createElement('a');\nlink.href = url;\nlink.download = 'scoreClassify.json';\n\nlink.click();\n\nURL.revokeObjectURL(url);\nlink.remove();"
  }
